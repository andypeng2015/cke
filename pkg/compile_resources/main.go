package main

import (
	"bufio"
	"bytes"
	"errors"
	"fmt"
	"io"
	"os"
	"os/exec"
	"path"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/cybozu-go/cke"
	utilyaml "k8s.io/apimachinery/pkg/util/yaml"
	"sigs.k8s.io/yaml"
)

func main() {
	err := subMain()
	if err != nil {
		fmt.Println("Error:", err)
		os.Exit(2)
	}
}

func subMain() error {
	files, err := filepath.Glob("*.yml")
	if err != nil {
		return err
	}

	images := make(map[string]string)
	for _, img := range cke.AllImages() {
		id := strings.SplitN(path.Base(img), ":", 2)[0]
		images[id] = img
	}

	var allResources []cke.ResourceDefinition
	for _, fname := range files {
		res, err := loadResources(fname, images)
		if err != nil {
			return err
		}
		allResources = append(allResources, res...)
	}

	cke.SortResources(allResources)
	return renderResources(allResources)
}

func loadResources(fname string, images map[string]string) ([]cke.ResourceDefinition, error) {
	tmpl, err := template.New(filepath.Base(fname)).ParseFiles(fname)
	if err != nil {
		return nil, err
	}

	buf := &bytes.Buffer{}
	err = tmpl.Execute(buf, images)
	if err != nil {
		return nil, err
	}

	y := utilyaml.NewYAMLReader(bufio.NewReader(buf))
	var res []cke.ResourceDefinition
	for {
		data, err := y.Read()
		if err == io.EOF {
			return res, nil
		}
		if err != nil {
			return nil, err
		}

		key, err := cke.ParseResource(data)
		if err != nil {
			return nil, err
		}

		parts := strings.Split(key, "/")
		kind := parts[0]
		var namespace, name string
		if len(parts) == 2 {
			name = parts[1]
		} else {
			namespace = parts[1]
			name = parts[2]
		}

		obj := struct {
			Metadata struct {
				Annotations struct {
					Revision int64  `json:"cke.cybozu.com/revision,string"`
					Image    string `json:"cke.cybozu.com/image"`
					Rank     uint32 `json:"cke.cybozu.com/rank,omitempty"`
				} `json:"annotations"`
			} `json:"metadata"`
		}{}
		if err := yaml.Unmarshal(data, &obj); err != nil {
			return nil, err
		}
		rev := obj.Metadata.Annotations.Revision
		if rev == 0 {
			return nil, errors.New("static resources must declare cke.cybozu.com/revision in annotations")
		}

		rank, err := cke.DecideRank(kind, namespace, obj.Metadata.Annotations.Rank)
		if err != nil {
			return nil, err
		}

		res = append(res, cke.ResourceDefinition{
			Key:        key,
			Kind:       kind,
			Namespace:  namespace,
			Name:       name,
			Revision:   rev,
			Image:      obj.Metadata.Annotations.Image,
			Rank:       rank,
			Definition: data,
		})
	}
}

var tmpl = template.Must(template.New("").Parse(`// Code generated by compile_resources. DO NOT EDIT.
//go:generate go run ../pkg/compile_resources

package static

import (
	"github.com/cybozu-go/cke"
)

// Resources is the Kubernetes resource definitions embedded in CKE.
var Resources = []cke.ResourceDefinition{
	{{ range . -}}
	{
		Key: {{ printf "%q" .Key }},
		Kind: "{{ .Kind }}",
		Namespace: {{ printf "%q" .Namespace }},
		Name: {{ printf "%q" .Name }},
		Revision: {{ .Revision }},
		Image: {{ printf "%q" .Image }},
		Definition: []byte({{ printf "%q" .Definition }}),
	},
	{{ end -}}
}
`))

func renderResources(res []cke.ResourceDefinition) error {
	f, err := os.OpenFile("resources.go", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		return err
	}
	defer f.Close()

	err = tmpl.Execute(f, res)
	if err != nil {
		return err
	}

	return exec.Command("goimports", "-w", f.Name()).Run()
}
